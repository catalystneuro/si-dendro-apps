{
    "name": "si_kilosort25",
    "description": "Spike Interface Pipeline - Kilosort2.5",
    "appImage": "ghcr.io/catalystneuro/dendro_si_kilosort25",
    "appExecutable": "/app/main.py",
    "executable": "/app/main.py",
    "processors": [
        {
            "name": "spikeinterface_pipeline_ks25",
            "description": "SpikeInterface Pipeline Processor for Kilosort 2.5",
            "label": "SpikeInterface Pipeline - Kilosort 2.5",
            "inputs": [
                {
                    "name": "input",
                    "description": "Input NWB file"
                }
            ],
            "outputs": [
                {
                    "name": "output",
                    "description": "Output NWB file"
                }
            ],
            "parameters": [
                {
                    "name": "lazy_read_input",
                    "description": "Lazy read input file",
                    "type": "bool",
                    "default": true
                },
                {
                    "name": "stub_test",
                    "description": "Stub test",
                    "type": "bool",
                    "default": false
                },
                {
                    "name": "recording_context.electrical_series_path",
                    "description": "Path to the electrical series in the NWB file",
                    "type": "str"
                },
                {
                    "name": "run_preprocessing",
                    "description": "Run preprocessing",
                    "type": "bool",
                    "default": true
                },
                {
                    "name": "preprocessing_context.preprocessing_strategy",
                    "description": "Strategy for preprocessing",
                    "type": "str",
                    "default": "cmr"
                },
                {
                    "name": "preprocessing_context.highpass_filter.freq_min",
                    "description": "Minimum frequency for the highpass filter",
                    "type": "float",
                    "default": 300.0
                },
                {
                    "name": "preprocessing_context.highpass_filter.margin_ms",
                    "description": "Margin in milliseconds",
                    "type": "float",
                    "default": 5.0
                },
                {
                    "name": "preprocessing_context.phase_shift.margin_ms",
                    "description": "Margin in milliseconds for phase shift",
                    "type": "float",
                    "default": 100.0
                },
                {
                    "name": "preprocessing_context.detect_bad_channels.method",
                    "description": "Method to detect bad channels",
                    "type": "str",
                    "default": "coherence+psd"
                },
                {
                    "name": "preprocessing_context.detect_bad_channels.dead_channel_threshold",
                    "description": "Threshold for dead channel",
                    "type": "float",
                    "default": -0.5
                },
                {
                    "name": "preprocessing_context.detect_bad_channels.noisy_channel_threshold",
                    "description": "Threshold for noisy channel",
                    "type": "float",
                    "default": 1.0
                },
                {
                    "name": "preprocessing_context.detect_bad_channels.outside_channel_threshold",
                    "description": "Threshold for outside channel",
                    "type": "float",
                    "default": -0.3
                },
                {
                    "name": "preprocessing_context.detect_bad_channels.n_neighbors",
                    "description": "Number of neighbors",
                    "type": "int",
                    "default": 11
                },
                {
                    "name": "preprocessing_context.detect_bad_channels.seed",
                    "description": "Seed value",
                    "type": "int",
                    "default": 0
                },
                {
                    "name": "preprocessing_context.common_reference.reference",
                    "description": "Type of reference",
                    "type": "str",
                    "default": "global"
                },
                {
                    "name": "preprocessing_context.common_reference.operator",
                    "description": "Operator used for common reference",
                    "type": "str",
                    "default": "median"
                },
                {
                    "name": "preprocessing_context.highpass_spatial_filter.n_channel_pad",
                    "description": "Number of channels to pad",
                    "type": "int",
                    "default": 60
                },
                {
                    "name": "preprocessing_context.highpass_spatial_filter.n_channel_taper",
                    "description": "Number of channels to taper",
                    "type": "Optional[int]",
                    "default": null
                },
                {
                    "name": "preprocessing_context.highpass_spatial_filter.direction",
                    "description": "Direction for the spatial filter",
                    "type": "str",
                    "default": "y"
                },
                {
                    "name": "preprocessing_context.highpass_spatial_filter.apply_agc",
                    "description": "Whether to apply automatic gain control",
                    "type": "bool",
                    "default": true
                },
                {
                    "name": "preprocessing_context.highpass_spatial_filter.agc_window_length_s",
                    "description": "Window length in seconds for AGC",
                    "type": "float",
                    "default": 0.01
                },
                {
                    "name": "preprocessing_context.highpass_spatial_filter.highpass_butter_order",
                    "description": "Order for the Butterworth filter",
                    "type": "int",
                    "default": 3
                },
                {
                    "name": "preprocessing_context.highpass_spatial_filter.highpass_butter_wn",
                    "description": "Natural frequency for the Butterworth filter",
                    "type": "float",
                    "default": 0.01
                },
                {
                    "name": "preprocessing_context.motion_correction.compute",
                    "description": "Whether to compute motion correction",
                    "type": "bool",
                    "default": true
                },
                {
                    "name": "preprocessing_context.motion_correction.apply",
                    "description": "Whether to apply motion correction",
                    "type": "bool",
                    "default": false
                },
                {
                    "name": "preprocessing_context.motion_correction.preset",
                    "description": "Preset for motion correction",
                    "type": "str",
                    "default": "nonrigid_accurate"
                },
                {
                    "name": "preprocessing_context.remove_out_channels",
                    "description": "Flag to remove out channels",
                    "type": "bool",
                    "default": false
                },
                {
                    "name": "preprocessing_context.remove_bad_channels",
                    "description": "Flag to remove bad channels",
                    "type": "bool",
                    "default": false
                },
                {
                    "name": "preprocessing_context.max_bad_channel_fraction_to_remove",
                    "description": "Maximum fraction of bad channels to remove",
                    "type": "float",
                    "default": 1.1
                },
                {
                    "name": "run_spikesorting",
                    "description": "Run spike sorting",
                    "type": "bool",
                    "default": true
                },
                {
                    "name": "spikesorting_context.sorter_name",
                    "description": "Name of the sorter to use.",
                    "type": "str",
                    "default": "kilosort2_5"
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.detect_threshold",
                    "description": "Threshold for spike detection",
                    "type": "float",
                    "default": 6
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.projection_threshold",
                    "description": "Threshold on projections",
                    "type": "List[int]",
                    "default": [
                        10,
                        4
                    ]
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.preclust_threshold",
                    "description": "Threshold crossings for pre-clustering (in PCA projection space)",
                    "type": "float",
                    "default": 8
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.car",
                    "description": "Enable or disable common reference",
                    "type": "bool",
                    "default": true
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.minFR",
                    "description": "Minimum spike rate (Hz), if a cluster falls below this for too long it gets removed",
                    "type": "float",
                    "default": 0.1
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.minfr_goodchannels",
                    "description": "Minimum firing rate on a 'good' channel",
                    "type": "float",
                    "default": 0.1
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.nblocks",
                    "description": "blocks for registration. 0 turns it off, 1 does rigid registration. Replaces 'datashift' option.",
                    "type": "int",
                    "default": 5
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.sig",
                    "description": "spatial smoothness constant for registration",
                    "type": "float",
                    "default": 20
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.freq_min",
                    "description": "High-pass filter cutoff frequency",
                    "type": "float",
                    "default": 150
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.sigmaMask",
                    "description": "Spatial constant in um for computing residual variance of spike",
                    "type": "float",
                    "default": 30
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.lam",
                    "description": "The importance of the amplitude penalty (like in Kilosort1: 0 means not used, 10 is average, 50 is a lot)",
                    "type": "float",
                    "default": 10.0
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.nPCs",
                    "description": "Number of PCA dimensions",
                    "type": "int",
                    "default": 3
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.ntbuff",
                    "description": "Samples of symmetrical buffer for whitening and spike detection",
                    "type": "int",
                    "default": 64
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.nfilt_factor",
                    "description": "Max number of clusters per good channel (even temporary ones) 4",
                    "type": "int",
                    "default": 4
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.AUCsplit",
                    "description": "Threshold on the area under the curve (AUC) criterion for performing a split in the final step",
                    "type": "float",
                    "default": 0.9
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.do_correction",
                    "description": "If True drift registration is applied",
                    "type": "bool",
                    "default": true
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.wave_length",
                    "description": "size of the waveform extracted around each detected peak, (Default 61, maximum 81)",
                    "type": "float",
                    "default": 61
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.keep_good_only",
                    "description": "If True only 'good' units are returned",
                    "type": "bool",
                    "default": false
                },
                {
                    "name": "spikesorting_context.sorter_kwargs.skip_kilosort_preprocessing",
                    "description": "Can optionaly skip the internal kilosort preprocessing",
                    "type": "bool",
                    "default": false
                },
                {
                    "name": "run_postprocessing",
                    "description": "Run postprocessing",
                    "type": "bool",
                    "default": true
                }
            ],
            "attributes": [
                {
                    "name": "wip",
                    "value": true
                }
            ],
            "tags": [
                {
                    "tag": "spike_sorting"
                },
                {
                    "tag": "spike_sorter"
                },
                {
                    "tag": "spike_interface"
                },
                {
                    "tag": "electrophysiology"
                },
                {
                    "tag": "pipeline"
                }
            ]
        }
    ]
}